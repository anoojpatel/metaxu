# Example 4: Advanced Types
# This example demonstrates Metaxu's advanced type features

# Generic type with constraints
struct Queue<T> {
    @mut items: List<T>,
    @const capacity: int
}

# Type with multiple type parameters and vector fields
struct Map<K, V> {
    keys: vector[K, 3](),
    values: vector[V, 3]()
}

# Enum with type parameters and variants
enum Result<T, E> {
    Ok(value: T),
    Err(error: E)
}

# Function with generic type parameters and effects
fn try_parse<T, E>(input: string) performs Parser<E> -> Result<T, E> {
    try {
        let value = perform Parser.parse<T>(input);
        Ok(value)
    } catch error {
        Err(error)
    }
}

# Trait (interface) definition
trait ToString {
    fn to_string(self) -> string
}

# Implement trait for type
implement ToString for Result<T, E> where T: ToString, E: ToString {
    fn to_string(self) -> string {
        match self {
            Ok(value) -> "Ok(" + value.to_string() + ")",
            Err(error) -> "Err(" + error.to_string() + ")"
        }
    }
}

# Example usage
fn main() {
    # Create generic queue
    let @mut queue = Queue<int> {
        items: [],
        capacity: 10
    };
    
    # Create map with different type parameters and vector literals
    let map = Map<string, int> {
        keys: vector[string, 3]("one", "two", "three"),
        values: vector[int, 3](1, 2, 3)
    };
    
    # Use generic Result type
    let result: Result<int, string> = try_parse("123");
    
    # Pattern matching on generic type
    match result {
        Ok(n) -> print("Parsed number: " + n.to_string()),
        Err(e) -> print("Error: " + e)
    }
    
    # Use trait implementation
    print("Result: " + result.to_string())
}
