{
    "name": "Metaxu",
    "scopeName": "source.metaxu",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#imports"
        },
        {
            "include": "#modes"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#functions"
        }, 
        {
            "include": "#types"
        },
        {
            "include": "#effects"
        },
        {
            "include": "#imports"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.metaxu",
                    "match": "#.*$"
                },
                {
                    "name": "comment.block.metaxu",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.metaxu",
                    "match": "\\b(if|else|while|for|in|return|try|match|case|let|fn|struct|enum|effect|module|perform|with|exclave)\\b"
                },
                {
                    "name": "keyword.operator.metaxu",
                    "match": "(\\+|-|\\*|/|%|==|!=|<|>|<=|>=|&&|\\|\\||=|\\+=|-=|\\*=|/=|->|\\\\)"
                }
            ]
        },
        "modes": {
            "patterns": [
                {
                    "name": "storage.modifier.metaxu",
                    "match": "@(local|mut|const|once|separate|many)"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.metaxu",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.metaxu",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.metaxu",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.float.metaxu",
                    "match": "\\b\\d+\\.\\d+\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.metaxu",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
                },
                {
                    "name": "entity.name.function.declaration.metaxu",
                    "match": "(?<=fn\\s+)([a-zA-Z_][a-zA-Z0-9_]*)"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "entity.name.type.metaxu",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
                },
                {
                    "name": "entity.name.type.primitive.metaxu",
                    "match": "\\b(int|bool|string|float|none)\\b"
                }
            ]
        },
        "effects": {
            "patterns": [
                {
                    "name": "entity.name.type.effect.metaxu",
                    "match": "(?<=effect\\s+)([A-Z][a-zA-Z0-9_]*)"
                },
                {
                    "name": "entity.name.function.effect.metaxu",
                    "match": "(?<=perform\\s+)([A-Z][a-zA-Z0-9_]*::)[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "match": "\\b(import|from|as)\\b",
                    "name": "keyword.control.import.metaxu"
                },
                {
                    "match": "(?<=\\bfrom\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s+import\\s)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*(?:,|$|\\s+as\\s))",
                    "name": "entity.name.import.metaxu"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "match": "(?<=let\\s+(?:@\\w+\\s+)*)([a-z][a-zA-Z0-9_]*)\\b(?!\\s*\\()",
                    "name": "variable.declaration.metaxu"
                },
                {
                    "match": "\\b([a-z][a-zA-Z0-9_]*)\\b(?=\\s*(?:=|:))",
                    "name": "variable.declaration.metaxu"
                },
                {
                    "match": "\\b([a-z][a-zA-Z0-9_]*)\\b(?!\\s*\\()",
                    "name": "variable.other.metaxu"
                }
            ]
        }
    }
}
